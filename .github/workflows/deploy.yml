name: Test, Build & Deploy

on:
  push:
    branches:
      - production
  pull_request:
    branches:
      - production
  workflow_dispatch:
    inputs:
      # Defaults to DEV (For testing workflow)
      proc_name:
        required: true
        type: string
        default: "tournament-tracker-test"
      remote_dir:
        required: true
        type: string
        default: "$HOME/tt_test"
      db_name:
        required: true
        type: string
        default: "tt_test"
          
env:
  # Default to PROD (For push/pull workflow)
  PROC_NAME: ${{ vars.PROC_NAME || inputs.proc_name || 'tournament-tracker-backend' }}
  REMOTE_DIR: ${{ vars.REMOTE_DIR || inputs.remote_dir || '$HOME/tournament-tracker' }}
  DB_NAME: ${{ vars.DB_NAME || inputs.db_name || 'tt_production' }}
  DB_PROTOCOL: postgresql
  DB_PORT: 26257
  DB_SSL_MODE: verify-full
  DB_CERT_PATH: $HOME/.postgresql/root.crt
  API_CFG_PATH: ./api/src/config/dbServer.json

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@main
      
      - name: Install Node.js
        uses: actions/setup-node@main
        with:
          node-version-file: '.nvmrc'

      - name: Install API packages
        run: cd api && npm ci
      
      - name: Create API config
        run: |
          echo '{' > temp.json
          echo '  "connectionString": "%PROTO://%NAME:%PASS@%DOM:%PORT/%DB?sslmode=%MODE&sslrootcert=%CERT&options=%OPTS",' >> temp.json
          echo '  "users": [{ "name": "api", "pass": "${{ secrets.DB_API_KEY }}" }],' >> temp.json
          echo '  "server": {' >> temp.json
          echo '    "proto": "${{ env.DB_PROTOCOL }}",' >> temp.json
          echo '    "db": "${{ env.DB_NAME }}",' >> temp.json
          echo '    "opts": "${{ secrets.DB_OPTS }}",' >> temp.json
          echo '    "dom": "${{ secrets.DB_DOMAIN }}",' >> temp.json
          echo '    "port": "${{ env.DB_PORT }}",' >> temp.json
          echo '    "cert": "${{ env.DB_CERT_PATH }}",' >> temp.json
          echo '    "mode": "${{ env.DB_SSL_MODE }}"' >> temp.json
          echo '  },' >> temp.json
          echo '  "pwsalt": "${{ secrets.SALT }}",' >> temp.json
          echo '  "sessionSecret": "${{ secrets.SESSION }}"' >> temp.json
          echo '}' >> temp.json
          mv temp.json ${{ env.API_CFG_PATH }}
      
      - name: Test API
        run: cd api && npm test
      
      - name: Sync API to client
        run: cd api && npm run sync
      
      - name: Upload API
        uses: actions/upload-artifact@v4
        with:
          name: api-code
          path: api
      
      - name: Install client packages
        run: cd client && npm ci
    
      - name: Build client
        run: npm run build

      - name: Upload client
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/build

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download client build
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: client

      - name: Download API code
        uses: actions/download-artifact@v4
        with:
          name: api-code
          path: api

      - name: Deploy to server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: |
            client/*
            api/*
          target: ${{ env.REMOTE_DIR }}
      
      - name: Restart API server
        run: pm2 restart "${{ env.PROC_NAME }}" || pm2 start ${{ env.REMOTE_DIR }}/index.js --name "${{ env.PROC_NAME }}"
